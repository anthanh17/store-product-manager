// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: dashboard.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getCategorySummary = `-- name: GetCategorySummary :many
SELECT
    c.id,
    c.name,
    c.description,
    COUNT(pc.product_id) as product_count
FROM
    categories c
LEFT JOIN
    product_categories pc ON c.id = pc.category_id
GROUP BY
    c.id, c.name, c.description
ORDER BY
    c.name
`

type GetCategorySummaryRow struct {
	ID           int32       `json:"id"`
	Name         string      `json:"name"`
	Description  pgtype.Text `json:"description"`
	ProductCount int64       `json:"product_count"`
}

func (q *Queries) GetCategorySummary(ctx context.Context) ([]GetCategorySummaryRow, error) {
	rows, err := q.db.Query(ctx, getCategorySummary)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCategorySummaryRow{}
	for rows.Next() {
		var i GetCategorySummaryRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ProductCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductStatusSummary = `-- name: GetProductStatusSummary :many
SELECT
    status,
    COUNT(*) as count
FROM
    products
GROUP BY
    status
`

type GetProductStatusSummaryRow struct {
	Status string `json:"status"`
	Count  int64  `json:"count"`
}

func (q *Queries) GetProductStatusSummary(ctx context.Context) ([]GetProductStatusSummaryRow, error) {
	rows, err := q.db.Query(ctx, getProductStatusSummary)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetProductStatusSummaryRow{}
	for rows.Next() {
		var i GetProductStatusSummaryRow
		if err := rows.Scan(&i.Status, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalCategories = `-- name: GetTotalCategories :one
SELECT
    COUNT(*) as total_categories
FROM
    categories
`

func (q *Queries) GetTotalCategories(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getTotalCategories)
	var total_categories int64
	err := row.Scan(&total_categories)
	return total_categories, err
}

const getTotalProducts = `-- name: GetTotalProducts :one
SELECT
    COUNT(*) as total_products
FROM
    products
`

func (q *Queries) GetTotalProducts(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getTotalProducts)
	var total_products int64
	err := row.Scan(&total_products)
	return total_products, err
}
